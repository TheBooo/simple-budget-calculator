{"version":3,"sources":["components/Alert.jsx","components/Form.jsx","components/Item.jsx","components/List.jsx","App.js","serviceWorker.js","index.js"],"names":["Alert","type","text","className","Form","props","onSubmit","onHandleSubmit","htmlFor","id","name","placeholder","value","charge","onChange","onHandleCharge","amount","onHandleAmount","edit","Item","expense","onDelete","onEdit","aria-label","onClick","List","expenses","onHandleDeleteAll","onHandleDelete","onHandleEdit","map","key","length","initialExpenses","localStorage","getItem","JSON","parse","App","useState","setExpenses","setCharge","setAmount","show","alert","setAlert","setEdit","setId","useEffect","setItem","stringify","handleAlert","setTimeout","event","target","preventDefault","tempExpenses","singleExpense","uuidv4","newExpenses","filter","currentExpense","reduce","acc","curr","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.55a965b6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Alert = ({ type, text }) => {\r\n  return (\r\n    <>\r\n      <div className=\"overlay\">\r\n        <div className={`alert alert-${type}`}>{text}</div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","import React from \"react\";\r\nimport { MdDone } from \"react-icons/md\";\r\n\r\nconst Form = props => {\r\n  return (\r\n    <form onSubmit={props.onHandleSubmit}>\r\n      <div className=\"form-center\">\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"charge\">Расходы</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"charge\"\r\n            name=\"charge\"\r\n            placeholder=\"Ипотека\"\r\n            value={props.charge}\r\n            onChange={props.onHandleCharge}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"amount\">Стоимость</label>\r\n          <input\r\n            type=\"number\"\r\n            className=\"form-control\"\r\n            id=\"amount\"\r\n            name=\"amount\"\r\n            placeholder=\"20000\"\r\n            value={props.amount}\r\n            onChange={props.onHandleAmount}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <button className=\"btn\" type=\"submit\">\r\n            {props.edit ? `Изменить ` : `Добавить`} <MdDone />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport { MdEdit, MdDelete } from \"react-icons/md\";\r\n\r\nconst Item = ({ expense, onDelete, onEdit }) => {\r\n  const { id, charge, amount } = expense;\r\n  return (\r\n    <>\r\n      <li>\r\n        <div>{charge}</div>\r\n        <div>\r\n          {amount}\r\n          <span\r\n            className=\"edit-icon\"\r\n            aria-label=\"Edit\"\r\n            onClick={() => onEdit(id)}\r\n          >\r\n            <MdEdit />\r\n          </span>\r\n          <span\r\n            className=\"delete-icon\"\r\n            aria-label=\"Close\"\r\n            onClick={() => onDelete(id)}\r\n          >\r\n            <MdDelete />\r\n          </span>\r\n        </div>\r\n      </li>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Item;\r\n","import React from \"react\";\r\nimport Item from \"./Item\";\r\n\r\nconst List = ({\r\n  expenses,\r\n  onHandleDeleteAll,\r\n  onHandleDelete,\r\n  onHandleEdit\r\n}) => {\r\n  return (\r\n    <>\r\n      <ul>\r\n        {expenses.map(expense => {\r\n          return (\r\n            <Item\r\n              key={expense.id}\r\n              expense={expense}\r\n              onDelete={onHandleDelete}\r\n              onEdit={onHandleEdit}\r\n            />\r\n          );\r\n        })}\r\n      </ul>\r\n      {expenses.length > 0 && (\r\n        <button className=\"btn\" onClick={onHandleDeleteAll}>\r\n          Удалить все расходы\r\n        </button>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport Alert from \"./components/Alert\";\r\nimport Form from \"./components/Form\";\r\nimport List from \"./components/List\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\n/*\r\nconst initialExpenses = [\r\n  { id: uuidv4(), charge: \"Аренда\", amount: 1500 },\r\n  { id: uuidv4(), charge: \"Кредит за авто\", amount: 4700 },\r\n  { id: uuidv4(), charge: \"Отпуск\", amount: 2500 }\r\n];*/\r\nconst initialExpenses = localStorage.getItem(\"expenses\")\r\n  ? JSON.parse(localStorage.getItem(\"expenses\"))\r\n  : [];\r\n\r\nfunction App() {\r\n  // --------------------------- STATE VALUES-------------------------\r\n  //all expenses, add expense\r\n  const [expenses, setExpenses] = useState(initialExpenses);\r\n  //single expense\r\n  const [charge, setCharge] = useState(\"\");\r\n  //single amount\r\n  const [amount, setAmount] = useState(\"\");\r\n  //alert\r\n  const [alert, setAlert] = useState({ show: false });\r\n  //edit\r\n  const [edit, setEdit] = useState(false);\r\n  //edit item id\r\n  const [id, setId] = useState(0);\r\n\r\n  //-----------------------------useEFFECT--------------------------\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"expenses\", JSON.stringify(expenses));\r\n  }, [expenses]);\r\n\r\n  // --------------------------- FUNCTIONALITY-------------------------\r\n  //FORM\r\n  //charge\r\n  const handleCharge = event => {\r\n    setCharge(event.target.value);\r\n  };\r\n  //amount\r\n  const handleAmount = event => {\r\n    setAmount(event.target.value);\r\n  };\r\n  //submit\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    if (charge !== \"\" && amount > 0) {\r\n      //check if we are editing\r\n      if (edit) {\r\n        let tempExpenses = expenses.map(expense => {\r\n          return expense.id === id ? { ...expense, charge, amount } : expense;\r\n        });\r\n        setExpenses(tempExpenses);\r\n        setEdit(false);\r\n        handleAlert({ type: \"success\", text: \"Расходы изменены\" });\r\n      } else {\r\n        const singleExpense = { id: uuidv4(), charge, amount };\r\n        setExpenses([...expenses, singleExpense]);\r\n        handleAlert({ type: \"success\", text: \"Расходы добавлены\" });\r\n      }\r\n      setCharge(\"\");\r\n      setAmount(\"\");\r\n    } else {\r\n      handleAlert({\r\n        type: \"danger\",\r\n        text: \"Назовите расходы и введите стоимость > 0\"\r\n      });\r\n    }\r\n  };\r\n  //DELETE ALL\r\n  const handleDeleteAll = event => {\r\n    setExpenses([]);\r\n    handleAlert({ type: \"danger\", text: \"Все расходы удалены\" });\r\n  };\r\n  //DELETE SINGLE EXPENSE\r\n  const handleDelete = id => {\r\n    let newExpenses = expenses.filter(expense => expense.id !== id);\r\n    setExpenses(newExpenses);\r\n    handleAlert({ type: \"danger\", text: \"Расходы удалены\" });\r\n  };\r\n  //EDIT SINGLE EXPENSE\r\n  const handleEdit = id => {\r\n    let currentExpense = expenses.filter(expense => expense.id === id);\r\n    setCharge(currentExpense[0].charge);\r\n    setAmount(currentExpense[0].amount);\r\n    setEdit(true);\r\n    setId(id);\r\n  };\r\n  //ALERT\r\n  const handleAlert = ({ type, text }) => {\r\n    setAlert({ show: true, type, text });\r\n    setTimeout(() => {\r\n      setAlert({ show: false });\r\n    }, 2000);\r\n  };\r\n  return (\r\n    <>\r\n      <h1>Калькулятор расходов</h1>\r\n      <main className=\"app\">\r\n        <Form\r\n          charge={charge}\r\n          amount={amount}\r\n          onHandleAmount={handleAmount}\r\n          onHandleCharge={handleCharge}\r\n          onHandleSubmit={handleSubmit}\r\n          edit={edit}\r\n        />\r\n        <List\r\n          expenses={expenses}\r\n          onHandleDeleteAll={handleDeleteAll}\r\n          onHandleDelete={handleDelete}\r\n          onHandleEdit={handleEdit}\r\n        />\r\n      </main>\r\n      {/*ОБЩИЕ РАСХОДЫ*/}\r\n      <h2>\r\n        Общие расходы:{\" \"}\r\n        <span className=\"total-spending\">\r\n          {\" \"}\r\n          {expenses.reduce((acc, curr) => {\r\n            return (acc += parseInt(curr.amount));\r\n          }, 0)}{\" \"}\r\n        </span>\r\n        ₽\r\n      </h2>\r\n      {alert.show && <Alert type={alert.type} text={alert.text} />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}